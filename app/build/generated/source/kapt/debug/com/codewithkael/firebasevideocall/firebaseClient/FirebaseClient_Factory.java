// Generated by Dagger (https://dagger.dev).
package com.codewithkael.firebasevideocall.firebaseClient;

import com.google.firebase.database.DatabaseReference;
import com.google.gson.Gson;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FirebaseClient_Factory implements Factory<FirebaseClient> {
  private final Provider<DatabaseReference> dbRefProvider;

  private final Provider<Gson> gsonProvider;

  public FirebaseClient_Factory(Provider<DatabaseReference> dbRefProvider,
      Provider<Gson> gsonProvider) {
    this.dbRefProvider = dbRefProvider;
    this.gsonProvider = gsonProvider;
  }

  @Override
  public FirebaseClient get() {
    return newInstance(dbRefProvider.get(), gsonProvider.get());
  }

  public static FirebaseClient_Factory create(Provider<DatabaseReference> dbRefProvider,
      Provider<Gson> gsonProvider) {
    return new FirebaseClient_Factory(dbRefProvider, gsonProvider);
  }

  public static FirebaseClient newInstance(DatabaseReference dbRef, Gson gson) {
    return new FirebaseClient(dbRef, gson);
  }
}
