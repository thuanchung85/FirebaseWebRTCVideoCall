// Generated by Dagger (https://dagger.dev).
package com.codewithkael.firebasevideocall.repository;

import com.codewithkael.firebasevideocall.firebaseClient.FirebaseClient;
import com.codewithkael.firebasevideocall.webrtc.WebRTCClient;
import com.google.gson.Gson;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainRepository_Factory implements Factory<MainRepository> {
  private final Provider<FirebaseClient> firebaseClientProvider;

  private final Provider<WebRTCClient> webRTCClientProvider;

  private final Provider<Gson> gsonProvider;

  public MainRepository_Factory(Provider<FirebaseClient> firebaseClientProvider,
      Provider<WebRTCClient> webRTCClientProvider, Provider<Gson> gsonProvider) {
    this.firebaseClientProvider = firebaseClientProvider;
    this.webRTCClientProvider = webRTCClientProvider;
    this.gsonProvider = gsonProvider;
  }

  @Override
  public MainRepository get() {
    return newInstance(firebaseClientProvider.get(), webRTCClientProvider.get(), gsonProvider.get());
  }

  public static MainRepository_Factory create(Provider<FirebaseClient> firebaseClientProvider,
      Provider<WebRTCClient> webRTCClientProvider, Provider<Gson> gsonProvider) {
    return new MainRepository_Factory(firebaseClientProvider, webRTCClientProvider, gsonProvider);
  }

  public static MainRepository newInstance(FirebaseClient firebaseClient, WebRTCClient webRTCClient,
      Gson gson) {
    return new MainRepository(firebaseClient, webRTCClient, gson);
  }
}
